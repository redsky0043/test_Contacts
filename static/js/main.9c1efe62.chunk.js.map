{"version":3,"sources":["components/CopyToClipboardText/index.jsx","constants/nationality.jsx","pages/Contacts/ContactsTable/index.jsx","pages/Contacts/constants.js","pages/Contacts/ToggleDataViewMode/index.jsx","pages/Contacts/useDataViewMode.js","pages/Contacts/index.jsx","pages/Contacts/useContacts.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","cursor","icon","marginRight","spacing","STATUS_COPY","TITLE_BY_STATUS","CopyToClipboardText","text","classes","useCopyToClipboard","copyToClipboard","useState","statusCopy","setStatusCopy","onClickCopy","useCallback","onClickAway","ClickAwayListener","Tooltip","title","placement","arrow","Button","display","alignItems","className","onClick","fontSize","NATIONALITIES","NATIONALITIES_HUMAN_NAME","table","ContactsTable","data","TableContainer","component","Paper","Table","size","aria-label","TableHead","TableRow","TableCell","TableBody","map","contact","scope","Avatar","src","picture","thumbnail","name","first","last","Typography","format","parseISO","dob","date","age","email","phone","location","country","city","street","number","nat","login","uuid","DATA_VIEW_MODES","ToggleDataViewMode","dataViewMode","setDataViewMode","handleChangeViewMode","_","nextView","ToggleButtonGroup","value","exclusive","onChange","ToggleButton","getInitialDataViewMode","localStorage","getItem","marginTop","headContainer","marginBottom","Contacts","contacts","setData","isLoading","setIsLoading","isError","setIsError","useEffect","a","fetch","response","json","results","error","Error","getContacts","useContacts","setItem","useDataViewMode","Container","Grid","container","item","xs","Box","justifyContent","variant","CircularProgress","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c1efe62.chunk.js","sourcesContent":["import { useCallback, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\nimport { useCopyToClipboard } from 'react-use';\r\nimport Button from '@material-ui/core/Button';\r\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            cursor: \"pointer\",\r\n        },\r\n        icon: {\r\n            marginRight: theme.spacing(1),\r\n        },\r\n    }),\r\n);\r\n\r\nconst STATUS_COPY = {\r\n    COPY: 'copy',\r\n    COPIED: 'copied',\r\n}\r\n\r\nconst TITLE_BY_STATUS = {\r\n    [STATUS_COPY.COPY]: 'Copy',\r\n    [STATUS_COPY.COPIED]: 'Copied',\r\n}\r\n\r\nexport const CopyToClipboardText = ({ text }) => {\r\n    const classes = useStyles();\r\n    const [, copyToClipboard] = useCopyToClipboard();\r\n    const [statusCopy, setStatusCopy] = useState(STATUS_COPY.COPY);\r\n\r\n    const onClickCopy = useCallback(() => {\r\n        copyToClipboard(text);\r\n        setStatusCopy(STATUS_COPY.COPIED);\r\n    }, [copyToClipboard, text]);\r\n\r\n    const onClickAway = useCallback(() => {\r\n        setStatusCopy(STATUS_COPY.COPY);\r\n    }, [setStatusCopy]);\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={onClickAway}>\r\n            <Tooltip title={TITLE_BY_STATUS[statusCopy]} placement='top' arrow>\r\n                <Button\r\n                    display='flex'\r\n                    alignItems='center'\r\n                    className={classes.root}\r\n                    onClick={onClickCopy}\r\n                >\r\n                    <FileCopyOutlinedIcon fontSize='small' className={classes.icon} />\r\n                    {text}\r\n                </Button>\r\n            </Tooltip>\r\n        </ClickAwayListener>\r\n    );\r\n};\r\n\r\nCopyToClipboardText.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n}","\r\nexport const NATIONALITIES = {\r\n    AU: 'AU', \r\n    BR: 'BR', \r\n    CA: 'CA', \r\n    CH: 'CH', \r\n    DE: 'DE', \r\n    DK: 'DK', \r\n    ES: 'ES', \r\n    FI: 'FI', \r\n    FR: 'FR', \r\n    GB: 'GB', \r\n    IE: 'IE', \r\n    IR: 'IR', \r\n    NO: 'NO', \r\n    NL: 'NL', \r\n    NZ: 'NZ', \r\n    TR: 'TR', \r\n    US: 'US',\r\n};\r\n\r\nexport const NATIONALITIES_HUMAN_NAME = {\r\n    [NATIONALITIES.AU]: 'Australian', \r\n    [NATIONALITIES.BR]: 'Brazilian', \r\n    [NATIONALITIES.CA]: 'Canadian', \r\n    [NATIONALITIES.CH]: 'Chinese', \r\n    [NATIONALITIES.DE]: 'Germany', \r\n    [NATIONALITIES.DK]: 'Denmark', \r\n    [NATIONALITIES.ES]: 'Spain', \r\n    [NATIONALITIES.FI]: 'Finland', \r\n    [NATIONALITIES.FR]: 'France', \r\n    [NATIONALITIES.GB]: 'Great Britain (UK)', \r\n    [NATIONALITIES.IE]: 'Ireland', \r\n    [NATIONALITIES.IR]: 'Iran', \r\n    [NATIONALITIES.NO]: 'Norway', \r\n    [NATIONALITIES.NL]: 'Netherlands', \r\n    [NATIONALITIES.NZ]: 'New Zealand', \r\n    [NATIONALITIES.TR]: 'Turkey', \r\n    [NATIONALITIES.US]: 'United States',\r\n}","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { CopyToClipboardText } from '../../../components/CopyToClipboardText';\r\nimport { NATIONALITIES_HUMAN_NAME } from '../../../constants/nationality';\r\n\r\nimport format from 'date-fns/format';\r\nimport parseISO from 'date-fns/parseISO';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {},\r\n});\r\n\r\nexport const ContactsTable = ({ data }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} size=\"small\" aria-label=\"contacts table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Avatar</TableCell>\r\n            <TableCell>Full name</TableCell>\r\n            <TableCell>Birthday</TableCell>\r\n            <TableCell>Email</TableCell>\r\n            <TableCell>Phone</TableCell>\r\n            <TableCell>Location</TableCell>\r\n            <TableCell>Nationality</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.map((contact) => (\r\n            <TableRow key={contact.login.uuid}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                <Avatar src={contact.picture.thumbnail} />\r\n              </TableCell>\r\n              <TableCell>\r\n                {contact.name.title} {contact.name.first} {contact.name.last}\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography>\r\n                  {format(parseISO(contact.dob.date), 'MM/dd/yyyy')}\r\n                </Typography>\r\n                <Typography>\r\n                  {contact.dob.age} years\r\n                </Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <CopyToClipboardText text={contact.email} />\r\n              </TableCell>\r\n              <TableCell>\r\n                <CopyToClipboardText text={contact.phone} />\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography>\r\n                  {contact.location.country}\r\n                </Typography>\r\n                <Typography>\r\n                  {contact.location.city}, {contact.location.street.name} {''}\r\n                  {contact.location.street.number}\r\n                </Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                {NATIONALITIES_HUMAN_NAME[contact.nat]}\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n","export const DATA_VIEW_MODES = {\r\n    TABLE: 'table',\r\n    GRID: 'grid',\r\n}","import { useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport { DATA_VIEW_MODES } from '../constants';\r\n\r\nexport const ToggleDataViewMode = ({ dataViewMode, setDataViewMode }) => {\r\n    const handleChangeViewMode = useCallback(\r\n        (_, nextView) => {\r\n            setDataViewMode(nextView);\r\n        },\r\n        [setDataViewMode]\r\n    );\r\n\r\n    return (\r\n        <ToggleButtonGroup\r\n            value={dataViewMode}\r\n            exclusive\r\n            onChange={handleChangeViewMode}\r\n        >\r\n            <ToggleButton\r\n                value={DATA_VIEW_MODES.GRID}\r\n                aria-label={DATA_VIEW_MODES.GRID}\r\n            >\r\n                <ViewModuleIcon />\r\n            </ToggleButton>\r\n            <ToggleButton\r\n                value={DATA_VIEW_MODES.TABLE}\r\n                aria-label={DATA_VIEW_MODES.TABLE}\r\n            >\r\n                <ViewListIcon />\r\n            </ToggleButton>\r\n        </ToggleButtonGroup>\r\n    );\r\n}\r\n\r\nToggleDataViewMode.propTypes = {\r\n    dataViewMode: PropTypes.oneOf(DATA_VIEW_MODES.TABLE, DATA_VIEW_MODES.GRID).isRequired,\r\n    setDataViewMode: PropTypes.func.isRequired,\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { DATA_VIEW_MODES } from './constants';\r\n\r\nconst getInitialDataViewMode = () => {\r\n    return localStorage.getItem('dataViewMode') || DATA_VIEW_MODES.TABLE\r\n}\r\n\r\nexport const useDataViewMode = () => {\r\n    const [dataViewMode, setDataViewMode] = useState(getInitialDataViewMode);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('dataViewMode', dataViewMode);\r\n    }, [dataViewMode]);\r\n\r\n    return [dataViewMode, setDataViewMode];\r\n}","import { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Box from '@material-ui/core/Box';\r\nimport { ContactsTable } from \"./ContactsTable\";\r\nimport { useContacts } from \"./useContacts\";\r\nimport { ToggleDataViewMode } from './ToggleDataViewMode';\r\nimport { useDataViewMode } from './useDataViewMode';\r\nimport { DATA_VIEW_MODES } from './constants';\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n      marginTop: theme.spacing(4),\r\n    },\r\n    headContainer: {\r\n      marginBottom: theme.spacing(3),\r\n    },\r\n  })\r\n);\r\n\r\n\r\nexport const Contacts = () => {\r\n  const classes = useStyles();\r\n  const contacts = useContacts();\r\n  const [dataViewMode, setDataViewMode] = useDataViewMode();\r\n\r\n  return (\r\n    <Container className={classes.root}>\r\n      <Grid container>\r\n        <Grid item xs={12} className={classes.headContainer}>\r\n          <Box display=\"flex\" justifyContent='space-between' >\r\n            <Typography variant=\"h4\" component=\"h2\">\r\n              Contacts\r\n            </Typography>\r\n            <ToggleDataViewMode \r\n              dataViewMode={dataViewMode}\r\n              setDataViewMode={setDataViewMode}\r\n            />\r\n          </Box>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {(() => {\r\n            if (contacts.isLoading) {\r\n              return <CircularProgress />;\r\n            }\r\n\r\n            if (contacts.isError) {\r\n              return <div>...error</div>;\r\n            }\r\n\r\n            if (dataViewMode === DATA_VIEW_MODES.TABLE) {\r\n              return <ContactsTable data={contacts.data} />\r\n            }\r\n\r\n            if (dataViewMode === DATA_VIEW_MODES.GRID) {\r\n              return 'grid';\r\n            }\r\n\r\n            return null;\r\n          })()}\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport const useContacts = () => {\r\n    const [data, setData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isError, setIsError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const getContacts = async () => {\r\n            setIsLoading(true);\r\n            try {\r\n                const response = await fetch(\"https://randomuser.me/api/?results=10\");\r\n                const { results, error } = await response.json();\r\n                if (error) {\r\n                    throw new Error(error);\r\n                }\r\n                setData(results);\r\n                setIsError(false);\r\n            } catch (e) {\r\n                setIsError(true);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        getContacts();\r\n    }, []);\r\n\r\n    return {\r\n        data,\r\n        isLoading,\r\n        isError,\r\n    };\r\n};","import { Contacts } from './pages/Contacts';\n \nexport function App() {\n  return (\n    <div className=\"App\">\n      <Contacts />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}